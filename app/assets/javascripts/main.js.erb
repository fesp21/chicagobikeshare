<% url_help = Shareabouts::Application.routes.url_helpers %>

$(function() {
  var locate_feature   = $("#locate_feature"),
      finalize_feature = $("#finalize_feature"),
      pages            = $("#pages a"),
      Map              = $("#map");

  var MarkerIcon = L.Icon.extend({
    iconUrl     : '<%= image_path("marker-bike.png") %>',
    iconSize    : new L.Point(25, 25),
    iconAnchor  : new L.Point(12, 12),
    popupAnchor : new L.Point(0, 0),
    shadowSize  : new L.Point(0, 0)
  });

  var FocusedMarkerIcon = L.Icon.extend({
    iconUrl     : '<%= image_path("marker-bike-focus.png") %>',
    iconSize    : new L.Point(25, 41),
    iconAnchor  : new L.Point(13, 41),
    popupAnchor : new L.Point(0, -33),
    shadowSize  : new L.Point(41, 41),
    shadowUrl   : '<%= image_path("marker-shadow.png") %>'
  });

  var NewMarkerIcon = L.Icon.extend({
    iconUrl     : '<%= image_path("marker-bike-new.png") %>',
    iconSize    : new L.Point(25, 41),
    iconAnchor  : new L.Point(13, 41),
    popupAnchor : new L.Point(0, -33),
    shadowSize  : new L.Point(41, 41),
    shadowUrl   : '<%= image_path("marker-shadow.png") %>'
  });

  var CrosshairIcon = L.Icon.extend({
    iconUrl     : '<%= image_path("crosshair.png") %>',
    iconSize    : new L.Point(63, 64),
    iconAnchor  : new L.Point(33,32),
    popupAnchor : new L.Point(0,0),
    shadowSize  : new L.Point(0,0) // no shadow
  });

  // Init the slider for filtering the results by popularity
  var initPopularitySlider = function(values) {
    // Popularity Filter
    $('#filter').hiderslider({
      title: 'Filter by Popularity',
      slider: {
        max: values.length-1,
        slide: function(e, data) {
          Map.shareabout('filterByPopularity', values[data.value]);
        },
        change: function(e, data) {
          Map.shareabout('filterByPopularity', values[data.value]);
        }
      }
    });
  };

  /**
   * @param {L.LatLng} latlng The location to translate to query string
   */
  var latLngToQueryString = function(latlng) {
    return "latitude=" + latlng.lat + "&longitude=" + latlng.lng;
  };

  // Initialize shareabouts map
  Map.shareabout({
    map : {
      maxZoom   : window.shareabouts.map_max_zoom,
      minZoom   : window.shareabouts.map_min_zoom,
      maxBounds : window.shareabouts.map_bounds,
      center    : window.shareabouts.map_center || new L.LatLng(40.719991, -73.999530)
    },
    tileUrl          : 'http://{s}.tile.cloudmade.com/c86f4f94b9394b3690b40366659a988e/3697/256/{z}/{x}/{y}.png',
    tileAttribution  : '&copy; 2012 <a target="_blank" href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a target="_blank" href="http://creativecommons.org/licenses/by-sa/2.0/">CCBYSA</a>, Imagery <a target="_blank" href="http://cloudmade.com">CloudMade</a>',
    markerIcon: new MarkerIcon(),
    focusedMarkerIcon: new FocusedMarkerIcon(),
    newMarkerIcon: new NewMarkerIcon(),
    crosshairIcon   : new CrosshairIcon(),
    locationTypeMarkerIcons : window.shareabouts.LocationTypeIcons,
    initialZoom : window.shareabouts.map_initial_zoom,
    callbacks : {
      onready : function(something) {
        locate_feature.show();
        finalize_feature.hide();
      },
      onload : function() {
        // See views/feature_points/index.html.erb
        // TODO: Should this just be handled automatically? A user shouldn't
        // have to know about this, methinks.
        if (window.shareabouts && window.shareabouts.initialFeatureId) {
          Map.shareabout("viewFeature", window.shareabouts.initialFeatureId)
        }

        // Popularity slider only shows up on the desktop
        if ( !Map.shareabout("smallScreen") ) {
          initPopularitySlider(Map.shareabout('getPopularityStats').uniqueVals);
        }
      },
      onpopup : function() {
        locate_feature.hide();
        finalize_feature.hide();

        // Hide mobile dropdown menu if visible
        $('#pages ul').removeClass('active');

        // Init the visibility indicator when the popup content loads
        setPopupOverflowIndicatorVisibility($('.page, .feature'));
        // Check to see if the visibility indicator should be shown on scroll
        $('.page, .feature').scroll(function(e) {
          var $popupContent = $(this);
          setPopupOverflowIndicatorVisibility($popupContent);
        });
      },
      locateNewFeature: function() {
        // Hide mobile dropdown menu if visible
        $('#pages ul').removeClass('active');
      }
    },
    // Intial feature to show
    initialFeatureId : window.shareabouts.initialFeatureId,
    featuresUrl      : '<%= url_help.feature_points_path %>',
    featureUrl       : '<%= url_help.feature_point_path("FEATURE_ID") %>',
    polygonsUrl      : '<%= url_help.feature_polygons_path %>', // json of coordinates for multipolygon areas
    dragHint         : '<%= I18n.t "map_controls.drag_hint" %>',
    dragHintLong     : '<%= I18n.t "map_controls.drag_hint_long" %>'
  });

  // Register click event within InformationPanel
  Map.shareabout("addClickEventListenerToPopup", "form#new_feature_point input:submit", function(mouseEvent, target){
    var form = $(mouseEvent.target).closest("form");

    Map.shareabout("submitNewFeature", {
      data : form.serialize() + "&" + latLngToQueryString( Map.shareabout("getNewFeatureMarker").getLatLng() ),
      url : form.attr("action")
    });
  });

  // Register click event within InformationPanel
  var throttledVoteCallback = (function() {
    var done = true;
    return function(mouseEvent, target){
      if (done) {
        done = false;
        var $form = $(mouseEvent.target).closest("form"),
            $button = $('button', $form),
            $label = $('.vote-label', $form),
            votes = parseInt($label.text(), 10);

        // Update the state of the button right away
        $button.is('.supported') ? votes-- : votes++;
        $button.toggleClass('supported');
        $label.text(votes);

        $.post( $form.attr("action"), $form.serialize(), function(data) {
          Map.shareabout("getPopup").setContent(data.view);
        },
        "json").complete(function() { done = true; });
      }
    };
  })();
  Map.shareabout("addClickEventListenerToPopup", "form[data-behavior=load_result_in_popup] :submit", throttledVoteCallback);

  // UI Elements that affect map state
  locate_feature.click( function(event) {
    Map.shareabout("locateNewFeature");
    $(this).hide();
    finalize_feature.show();

    // Reset filtering
    $('#map-container').hiderslider('reset');
  });

  finalize_feature.click( function(event) {
    var newFeature = Map.shareabout("getNewFeatureMarker"),
        latlng     = newFeature._visible ? newFeature.getLatLng() : Map.shareabout("getMap").getCenter(),
        data       = latLngToQueryString(latlng);

    $.getJSON("<%= url_help.within_region_feature_points_path %>", data, function(data){
      if (!data || data.status != "error") { // Location is good
        Map.shareabout("loadNewFeatureForm", {
          url : '<%= url_help.new_feature_point_path %>'
        });
        $(this).hide();
      } else Map.shareabout("showHint", data.message, newFeature);
    });
  });

  // Display static pages in the popup
  var showPage = function(url) {
    $.get(url, function(data){
      Map.shareabout("openPopup", data.view);

      // Reset the url when opening a page
      if (window.history && window.history.pushState) {
        window.history.pushState(null, null, '/');
      }
    }, "json");
  };

  // Display static pages in the popup when a link is clicked
  pages.click(function(click){
    click.preventDefault();
    showPage($(click.target).attr("href"));
  });

  // Show the welcome page on page load ONLY if not starting with a feature visible
  if (pages.is('[data-welcome-page]') && !window.shareabouts.feature) {
    showPage(pages.filter('[data-welcome-page]').attr("href"));
  }

  // Desktop only
  if ( !Map.shareabout("smallScreen") ) {
    // Start the ticker
    $("#ticker").activityticker({
      url    : "<%= url_help.activity_index_path %>",
      toggle : function(e){
        $("#content").toggleClass("ticker_on");
      },
      click: function(e, ui) {
        e.preventDefault();
        Map.shareabout('viewFeature', ui.featureId);

        // Reset filtering
        $('#map-container').hiderslider('reset');
      }
    });
  }

  // Show the hidden comment form
  $(".reply-link").live("click", function(e) {
    $("#reply").removeClass("hide");
  });

  // Label checkbox toggle
  $("label.checkbox-button input:checkbox").live("click", function(e){
    $(this).closest("label").toggleClass("checked");
  });

  // Toggle the mobile nav menu
  $('#pages').click(function(){
    $('#pages ul').toggleClass('active');
  });


  // scroll to hide iPhone address bar
  // via Nate Smith -- http://blog.nateps.com/how-to-hide-the-address-bar-in-a-full-screen
  var page = document.getElementById('wrapper'),
      ua = navigator.userAgent,
      iphone = ~ua.indexOf('iPhone') || ~ua.indexOf('iPod'),
      ipad = ~ua.indexOf('iPad'),
      ios = iphone || ipad,
      // Detect if this is running as a fullscreen app from the homescreen
      fullscreen = window.navigator.standalone,
      android = ~ua.indexOf('Android'),
      lastWidth = 0;

  if (android) {
    // Android's browser adds the scroll position to the innerHeight, just to
    // make this really !@#$%^& difficult. Thus, once we are scrolled, the
    // page height value needs to be corrected in case the page is loaded
    // when already scrolled down. The pageYOffset is of no use, since it always
    // returns 0 while the address bar is displayed.
    window.onscroll = function() {
      page.style.height = window.innerHeight + 'px'
    }
  }
  var setupScroll = window.onload = function() {
    // Start out by adding the height of the location bar to the width, so that
    // we can scroll past it
    if (ios) {
      // iOS reliably returns the innerWindow size for documentElement.clientHeight
      // but window.innerHeight is sometimes the wrong value after rotating
      // the orientation
      var height = document.documentElement.clientHeight;
      // Only add extra padding to the height on iphone / ipod, since the ipad
      // browser doesn't scroll off the location bar.
      if (iphone && !fullscreen) height += 60;
      page.style.height = height + 'px';
    } else if (android) {
      // The stock Android browser has a location bar height of 56 pixels, but
      // this very likely could be broken in other Android browsers.
      page.style.height = (window.innerHeight + 56) + 'px'
    }
    // Scroll after a timeout, since iOS will scroll to the top of the page
    // after it fires the onload event
    setTimeout(scrollTo, 0, 0, 1);
  };
  (window.onresize = function() {
    var pageWidth = page.offsetWidth;
    // Android doesn't support orientation change, so check for when the width
    // changes to figure out when the orientation changes
    if (lastWidth == pageWidth) return;
    lastWidth = pageWidth;
    setupScroll();
  })();

  // Sets the visibility of the overflow indicator in the popup
  function setPopupOverflowIndicatorVisibility($popupContent) {
    var el = $popupContent.get(0);

    // Only show the indicator if...
    $('.information-panel').toggleClass('overflowing', (
      // ...this is scrollable
      el.clientHeight < el.scrollHeight &&
      // ...and we are not at the bottom
      ($popupContent.scrollTop() - 10) < el.scrollHeight - el.clientHeight
    ));
  }
});