From 0 to Shareabouts in about an hour
======================================
Shareabouts requires ruby, postgis, ogr2ogr, and facebook and twitter 
API keys.

Ruby
----
Shareabouts was built on top of ruby 1.9.2.

The easiest way to get ruby is via rvm.  rvm requires git, so install
git first.  Then follow the rvm installation instructions, preferably the
single-user approach, found here:
https://rvm.beginrescueend.com/rvm/install/

(It is generally NOT recommended to use a system-specific package
system such as apt-get, rpm, etc. to install rvm.  Doing so will
probably set up a multi-user version of rvm and may make the rest of
these instructions fail.)

Don't forget to edit your .profile (or .bash_profile, or whatever)
as per the instructions!

Then install ruby 1.9.2:
$ rvm install 1.9.2

(On Ubuntu, if you get compile errors like "SSLv2_client_methodâ€™
undeclared here", you may need to follow these instructions to get the
right SSL library installed: http://29a.ch/2011/10/28/rvm-on-ubuntu-11-10
But also note that doing a single-user install of rvm may "just work".)

Now to use 1.9.2:
$ rvm use 1.9.2

Or to use ruby 1.9.2 always, run:
$ rvm use 1.9.2 --default

Postgis
------- 

To run Shareabouts, you'll need postgis set up on top of postgres. You can
install postgis via a package manager like apt-get or macports. If using 
macports, you will probably need to also install postgresqlXX-server, where 
XX is the version of psql that you installed. If when following the post-
install instructions on OS X and setting up the initial database you get a 
fatal memory allocation error, see: 
http://willbryant.net/software/mac_os_x/postgres_initdb_fatal_shared_memory_error_on_leopard

Once you've installed postgres and postgis, depending on your system,
you may need to to run scripts to set 
up postgis and then you'll create a template spatial database that you can use 
for your shareabouts database.

To check if you need to create the template:
$ psql -l | grep template_postgis

If that turns up nothing, run these sql commands to create the template:

-- Create a new database
CREATE DATABASE template_postgis;

-- Make it a template database
UPDATE pg_database SET datistemplate = TRUE WHERE datname = 'template_postgis';

-- Connect to new database and install the pl/pgsql language
\c template_postgis

CREATE LANGUAGE plpgsql;

-- Install PostGIS (your file paths may vary)
\i /opt/local/share/postgresql84/contrib/postgis-1.5/postgis.sql 
\i /opt/local/share/postgresql84/contrib/postgis-1.5/spatial_ref_sys.sql
GRANT ALL ON geometry_columns TO PUBLIC;
GRANT ALL ON geography_columns TO PUBLIC;
GRANT ALL ON spatial_ref_sys TO PUBLIC;

-- vacuum freeze: it will guarantee that all rows in the database are
-- "frozen" and will not be subject to transaction ID wraparound
-- problems.
VACUUM FREEZE;

Authentication
--------
Shareabouts uses facebook and/or twitter for authentication, via the omniauth gem. 
You'll need to generate app keys and secrets at 
https://developers.facebook.com/apps and https://dev.twitter.com/apps.

Once you have those keys, copy config/facebook.yml.example to config/facebook.yml, 
and copy config/twitter.yml.example to config/twitter.yml. Then, fill in your keys 
for each environment for each service.


Gems
-----------------
Install your gems by running 
$ bundle install

If the pg gem fails to install on OS X, check out the --with-pg-config option 
as specified in config/database.yml.example.

Databases
---------
Copy config/database.yml.example to config/database.yml. Set your postgres 
server and user info. You'll need to specify the template to use in order to
get the spatial goodies:
  template: template_postgis

Also change the database username and password as needed.

Note that you need to check the config for *all* databases --
development, test, and (if you're setting up a production server) production.

Now you can run
$ rake db:create 

and
$ rake db:migrate

Finally, seed the database with an initial admin user and other data:

$ rake db:seed

Do not use db:schema:load or db:setup, as ruby that is generated in schema.rb 
does not accurately reflect the state of the database generated by db:migrate.

Testing
--------

We use Rspec for testing, so you can run the tests like:

$ rake spec

Shapefile reprojection
----------------------
We drop down to use the command line tool, ogr2ogr, in order to reproject 
imported shapefiles (to define regions), so you'll need ogr2og2 installed 
wherever you're running the app. Shapefiles are reprojected via a delayed
job, so you'll need to start up delayed_jobs via:
$ script/delayed_job start

The deploy script will start and restart delayed jobs for you so you only
need to start the delayed jobs locally for development. 

Admins and Site Options
-----------------------
The seed script, located at db/seeds.rb, will generate the initial Site Options
and Admin user. Run the script:

$ rake db:seed

It is VERY IMPORTANT to update the credentials for the generated Admin user 
after you start up the server (see "Starting the Development Server"). Visit 
http://0.0.0.0:3000/admin (or whatever the address for your local server is),
log in with the default credentials found in db/seeds.rb, click "Admins" in the
left nav, and click "Edit" on the line of the generated admin. Enter the email 
address, new password, and password again (under Password Confirmation) and 
click Save.

Admin Interface
---------------

Shareabouts uses the rails_admin engine for some management tasks.

To visit the admin UI, browse to /admin/ and use the admin user
created by 'rake db:seed' as described above.


Starting the Development Server
--------------------------------

In the root of your shareabouts checkout, run this:

$ rails server


Server setup (for production)
------------------------------

Check out 
http://kris.me.uk/2011/10/28/rails-rvm-passenger-capistrano-git-apache.html 
for a good guide on setting up your app to run on Apache with passenger. 

You don't need to do this for local development.

Deploying (production)
-----------------------

(You can skip this if you're only doing local development or if you're 
deploying to Heroku or another cloud platform.
For deployment to dotcloud.com, see doc/dotcloud_deployment. For EngineYard,
see doc/engineyard_setup.)

We deploy with capistrano. Our deploy script is config/deploy.rb. We deploy to 
multiple environments, so we have a production.rb and staging.rb deploy script
in config/deploy, which contain server- and environment- specific variables, 
such as :domain, :user, and :deploy_to.

To create the initial capistrano setup run:
$ cap deploy:setup

Then, on the deployment server, go into the 'shared' directory under
your deploy_to directory. Put your customized config/database.yml,
config/facebook.yml and config/twitter.yml into shared, preserving the config
directory structure.

On your local machine you should be able to run
 $ cap deploy:migrations

which will deploy the app and run pending migrations. Whenever deploying with 
pending migrations, use deploy:migrations. If there are no migrations, 
cap deploy will do.

Make sure to run RAILS_ENV=production rake db:seed from the current release 
directory in order to create the initial site options and admin user. 
*IT IS VERY IMPORTANT* to change the credentials for the generated Admin user. 
Visit http://_yourserver_/admin, log in with the default credentials, click 
"Admins" in the left nav, and click "Edit" on the line of the generated admin.
Enter the email address, new password, and password again (under Password 
Confirmation) and click Save. 


Feedback
--------
If you run into any problems setting up the app or find that this document 
lacks something, please get in touch with us on our mailing list at 
http://groups.google.com/group/shareabouts-dev. Also feel free to fork this 
repo and update this guide yourself :) Thank you!
